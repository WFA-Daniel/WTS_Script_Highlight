{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "WTS test suite script",
	"patterns": [
        {
            "include": "#strings"
        },
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#parameters"
		},
        {
            "include": "#comments"
        }
    ],
	"repository": {
        "operators": {
            "patterns": [{
                "name": "keyword.operator.wts",
                "match": "(\\+|-|\\*|\/|\\*\\*|%|=|<>|<|<=|>|>=)"
            }, {
                "name": "keyword.control.wts",
                "match": "(!|,)"
            }]
        },
		"keywords": {
			"patterns": [{
				"name": "entity.name.function.wts",
				"match": "^[\\s]*(if|else|endif|or|and|define|rand|toint|wfa_test_commands_init|wfa_test_commands|r_info|info|echo|getuserinput|pause|sleep|_inv|inv_|_DNB_|DisplayName|payloadValue|payloadValue16K|stream1|stream2|stream3|stream_trans|max_throughput|sniffer_enable|exit|ResultCheck|search|cat|math|mexpr|echo_IfNoWTS|echoIfNoWTS|ifNoWTS|IfNoWTS|IfNOWTS|UserInput_IfNoWTS|UserInput_IfNOWTS|generate_randnum|Phase|StoreThroughput|ResultWMM|ResultWMM_1|ResultWMM_2|ResultIBSS|CheckThroughput|CheckMCSThroughput|CheckDT4Result|TransactionThroughput|radio_check_info|manual_check_info|add_media_file|AddSTAVersionInfo|socktimeout|PingInternalChk|append|config_multi_subresults|extract_p2p_ssid|ucc_form_device_discovery_frame|get_rnd_ip_address|calculate_ext_listen_values|ExternalFunc|mac2ipv6|mathexpr|htoi|GetUCCSystemTime|TMSCheck|StringCompare|execpycstrfunc|getUCCValuebyKeyword|saveUCCKeyValue)"
			}, {
                "name": "entity.name.function.wts",
                "match" : "(traffic_agent_send|traffic_send_ping|traffic_stop_ping|traffic_agent_reset|traffic_agent_receive_stop|traffic_agent_config|traffic_agent_receive_start|traffic_agent_version|traffic_start_iperf|traffic_stop_iperf|ap_set_wireless|ap_set_security|ap_config_commit|ap_ca_version|ap_preset_testparameters|ap_set_11n_wireless|ap_set_pmf|ap_set_apqos|ap_set_staqos|ap_set_radius|ap_reboot|ap_reset_default|ap_get_info|ap_deauth_sta|ap_get_mac_address|ap_get_parameter|ap_set_hs2|ap_set_rpm|ap_send_addba_req|ap_set_11d|ap_set_11h|ap_set_rrm|ap_set_rfeature|ap_set_wps_pbc|ap_set_qos|ap_get_parameter|ca_get_version|device_get_info|device_list_interfaces|sta_preset_testparameters|sta_get_info|sta_set_encryption|sta_set_ip_config|sta_associate|sta_is_connected|sta_get_bssid|sta_get_ip_config|sta_disconnect|sta_get_mac_address|sta_verify_ip_connection|sta_set_psk|sta_set_eaptls|sta_set_eapttls|sta_set_eapsim|sta_set_peap|sta_set_eapfast|sta_set_eapaka|sta_set_uapsd|sta_set_ibss|sta_set_mode|sta_set_wmm|sta_up_load|sta_set_systime|sta_set_11n|sta_set_rifs_test|sta_set_wireless|sta_send_addba|sta_send_coexist_mgmt|sta_get_p2p_dev_address|sta_set_p2P|sta_set_p2p|sta_start_autonomous_go|sta_p2p_connect|sta_p2p_start_group_formation|sta_p2p_dissolve|sta_send_p2p_invitation_req|sta_accept_p2p_invitation_req|sta_send_p2p_provision_dis_req|sta_set_wps_pbc|sta_set_wps_p2ps_pin|sta_wps_read_pin|sta_wps_read_label|sta_wps_enter_pin|sta_set_wps_p2ps_pin|sta_get_psk|sta_p2p_reset|sta_get_p2p_ip_config|sta_send_p2p_presence_req|sta_set_sleep|sta_set_opportunistic_ps|sta_send_service_discovery_req|sta_add_arp_table_entry|sta_block_icmp_response|sta_set_security|sta_set_macaddr|sta_reset_default|sta_reset_parm|sta_set_rfeature|sta_set_radio|dev_send_frame|dev_start_test|dev_stop_test|dev_get_log|dev_exec_action|dev_get_frame_info|sta_hs2_associate|sta_bssid_pool|sta_add_credential|start_wfd_connection|connect_go_start_wfd|sta_generate_event|reinvoke_wfd_session|sta_get_parameter|sta_set_power_save|sta_exec_action|sta_invoke_command|sta_manage_service|sta_get_event_details|sta_policy_update|sta_set_pwrsave|sta_scan|sta_scan_bss|sta_get_events|sta_nfc_action|sta_reassociate|sta_reassoc|sta_osu|sta_hs2_venue_info|wfa_merge_trace|sniffer_media_check|wfa_av_capture|sniffer_control_upload|sniffer_clear_counters|sniffer_check_p2p_NoA_wmmps_retrigger|sniffer_check_p2p_NoA_start_time|sniffer_check_p2p_NoA_duration|sniffer_check_p2p_opps_go|sniffer_check_p2p_opps_client|sniffer_get_field_value|sniffer_inject_frame|sniffer_get_info|sniffer_control_field_check|sniffer_control_field_check_all|sniffer_frame_check|sniffer_control_stop|sniffer_control_start|sniffer_check_pmk_id|sniffer_control_filter_capture|wfa_sniffer_control_filter_capture|sniffer_control_capture_decrypt|wfa_sniffer_control_capture_decrypt|wfa_wfds_generate_hash|sniffer_stream_check|sniffer_set_preference|wfa_sniffer_stream_check|sniffer_control_subtask|sniffer_fetch_file|sniffer_decrypt_trace|sniffer_check_time_difference|sniffer_check_Dscv_Window|wfa_sniffer_check_retry|sniffer_check_p2p_NoA_Descriptor|sniffer_check_pvb_pspoll_data|sniffer_check_pvb_psnonpoll_data|sniffer_check_frame_field|sniffer_check_AKMS|sniffer_check_ProbeSupp|sniffer_check_ProbeInterval|sniffer_check_frame_interval|sniffer_check_OCE_scan|sniffer_check_tbtt|sniffer_check_RNR_ChnlRep|sniffer_check_RNR_NeighAP|sniffer_get_average_value|sniffer_calc_partial_tsf|sniffer_check_neighbor_report|sniffer_check_NAN_bitmap|sniffer_check_NAN_func|sniffer_set_chanspecs|sniffer_checkack_forframe|sniffer_get_field_info|sniffer_control_field_check_all|sniffer_check_group_traffic|sniffer_check_groupstatus_userpos_array|sniffer_get_ndpa_sta_info|sniffer_control_filter_capturename|sniffer_check_chnl_switch|sniffer_check_duplicate_udp|sniffer_check_p2p_client_ps_retrigger|sniffer_check_cts_ppdu|sniffer_check_PPET|sniffer_check_RU_Alloc|sniffer_check_trigger_UserInfo|sniffer_check_OM_TXOP|sniffer_check_TXOP_duration|sniffer_check_20MHz_occupancy|sniffer_check_PEdisambiguity|sniffer_check_PEduration|sniffer_check_RU26Alloc_In80MHz|sniffer_get_TXOP_SnifferTimeStamp|sniffer_get_MACPaddingBitLen|sniffer_get_mod_value|sniffer_perform_math|sniffer_check_TWTSP_window|sniffer_check_broadcast_TWTSP_window|sniffer_get_partial_twt|sniffer_calc_next_twtsp|sniffer_get_TXOP_bits|sniffer_check_BasicTrig_Interval|sniffer_check_RTSTXOPDur|sniffer_check_FirstBasicTrgWithAggrID|sniffer_check_NumInstance|sniffer_get_MBSS_BSSID|sniffer_check_dataforPSSTA|sniffer_check_ULMUSensing|sniffer_check_country_info|sniffer_check_TPE|sniffer_compare_trace|sniffer_generate_hash|sniffer_get_value|sniffer_check_framecontent|sniffer_get_uri_value|sniffer_check_trig_mba|sniffer_check_smps_txop|sniffer_control_config|sniffer_check_smps_txop_mu|server_reset_default|server_set_parameter|server_get_info|server_request_status|server_ca_get_version|server_exec_action|wfa_aca_get|wfa_aca_set|wfa_aca_act|wfaemt_config_nav|wfaemt_start_nav_test|wfaemt_stop_nav_test|wfaemt_start_staut_mic_test|wfaemt_stop_staut_mic_test|wfaemt_config_staut_mic|wfaemt_start_aput_mic_test|wfaemt_stop_aput_mic_test|wfaemt_config_aput_mic|AccessPoint|^PowerSwitch|power_switch_ctrl|start_wps_registration|dev_configure_ie|dev_reset_default|dev_set_config|dev_send_1905|dev_send_traffic|dev_get_mac_address|dev_get_parameter|dev_set_security|dev_set_wireless|dev_config_commit|dev_set_measparam|dev_get_measlog|dev_get_measrslt|dev_meas_start|dev_meas_stop|dev_set_rfeature|dev_get_parameter|dev_ble_action|wfa_de_collect|wfa_de_upload|wfa_de_validate|wfa_de_element_check|dev_start_buffer|dev_stop_buffer|dev_set_trigger)"
			},{
				"name": "constant.other.wts",
				"match": "\\b(FALSE|NULL|IS|AS|TRUE|FAIL|PASS|DEFAULT|ID|NoPacketsFound|NoFieldFound)\\b"
            }]
		},
		"parameters": {
			"patterns": [{
				"name": "variable.parameter.wts",
				"match": "(\\$[\\w\\d-]+)"
			},{
                "name": "variable.name.wts",
                "match" : "(PingInternalChk|wfa_control_agent_[^PCE]\\w+_sta|wfa_control_agent_peraso_sta|wfa_control_agent_cypress_sta|\\w+_sta_wireless_ip|control_agent_testbed_sta[1-3]|control_agent_testbed_sta[1-3]_tspec|^testbed_sta[1-3]\\w*|injector_control_agent|wfa_control_agent_\\w+_ap|\\w+_ap_wireless_ip|wfa_control_agent_dut|wfa_control_agent_dut_2|dut_wireless_ip|dut_2_wireless_ip|(?!dut_(2_)?wireless_ip)Dut\\w+|APUT_\\w+|wfa_control_agent_\\w+_cntlr|wfa_control_agent_\\w+_agt|wfa_control_agent_\\w+_ctt|\\w+_ctt_wireless_ip|wfa_control_agent_atten|wfa_console_tg|wfa_console_ctrl|wfa_control_agent_PCE1_sta|wfa_control_agent_PCE2_sta|wfa_control_agent_PCE3_sta|wfa_sniffer\\d*|wfa_control_agent_capture_sta|wfa_control_agent_\\w+_osu|HostAPD\\w*|Microsoft\\w*|Radiator\\w*|RS\\d+\\w*|RADIUS\\d+\\w*|wfa_control_agent_radiusserver|^PowerSwitch\\w+|TestbedAPConfigServer|^WFAEMT\\w+|wfa_wfaemt_control_agent|^Atheros\\[^_]*AP\\w*|^Broadcom\\[^_]*AP\\w*|^Marvell\\[^_]*AP\\w*|^Ralink\\[^_]*AP\\w*|^Realtek[^_]*AP\\w*|^Ruckus[^_]*AP\\w*|^Ericsson[^_]*AP\\w*|^Cisco[^_]*AP\\w*|^Qualcomm\\[^_]*AP\\w*|^Aruba[^_]*AP\\w*|^Atheros[^_]*STA\\w*|^Broadcom[^_]*STA\\w*|^Marvell[^_]*STA\\w*|^Ralink[^_]*STA\\w*|^Intel[^_]*STA\\w*|^Mediatek[^_]*STA\\w*|^Qualcomm[^_]*STA\\w*|^Epson[^_]*STA\\w*|^Realtek[^_]*STA\\w*)"
            }]
		},
        "strings": {
            "patterns": [{
                "match": "^[\\s]*(r_info)(!)(PASS)(!)",
                "captures": {
                    "1": {"name": "entity.name.function.wts"},
                    "2": {"name": "keyword.other.wts"},
                    "3": {"name": "constant.language.wts"},
                    "4": {"name": "keyword.other.wts"}
                }
            }, {
                "match": "^[\\s]*(r_info)(!)(FAIL)(!)([^!]*)(!)",
                "captures": {
                    "1": {"name": "entity.name.function.wts"},
                    "2": {"name": "keyword.other.wts"},
                    "3": {"name": "constant.language.wts"},
                    "4": {"name": "keyword.other.wts"},
                    "5": {"name": "string.quoted.other.wts"},
                    "6": {"name": "keyword.other.wts"}
                }
            }, {
                "match": "^[\\s]*(info|getuserinput|Userinput_ifnoWTS|IfNoWTS|pause|exit)(!)([^!]*)(!)",
                "captures": {
                    "1": {"name": "entity.name.function.wts"},
                    "2": {"name": "keyword.other.wts"},
                    "3": {"name": "string.quoted.other.wts"},
                    "4": {"name": "keyword.other.wts"}
                }
            }]
        },
        "comments": {
            "patterns": [{
				"name": "comment.line.wts",
				"begin": "#",
                "end": "$"
			}]
        }
	},
	"scopeName": "source.txt"
}